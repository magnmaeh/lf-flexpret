target C {
    keepalive: true, // Do not exit when event queue is empty.
    single-threaded: true,
    logging: error,
    build: "../../scripts/build_flexpret_unix_unthreaded.sh"
}

preamble {=
    #include "platform.h"

    #define MAX_INTERRUPTS 10
    #define TIMESTAMP_SIZE (2 * MAX_INTERRUPTS)
=}

main reactor {
    physical action a: int
    
    preamble {=
        static instant_t *timestamps;
        void *action;
        void ie_isr(void) {
            printf("Got int\n");
            static int ntimes = 0;
            timestamps[2 * ntimes++ + 0] = lf_time_physical_elapsed();
            lf_schedule(action, 0);
        }
    =}

    reaction(startup) -> a {=
        action = a;
        register_isr(EXC_CAUSE_EXTERNAL_INT, ie_isr);
        timestamps = malloc(TIMESTAMP_SIZE * sizeof(instant_t) + 1000);
        ENABLE_INTERRUPTS();
        printf("Init\n");
    =}

    reaction(a) {=
        static int ntimes = 0;
        timestamps[2 * ntimes++ + 1] = lf_time_physical_elapsed();
        if (ntimes >= MAX_INTERRUPTS) {
            lf_request_stop();
        }
    =}

    reaction(shutdown) {=
        for (int i = 0; i < MAX_INTERRUPTS; i++) {
            printf("Iteration %i: Interrupt: %lli, {0}: %lli,\n",
                i, timestamps[2 * i + 0], timestamps[2 * i + 1]);
        }
        free(timestamps);
    =}
}
